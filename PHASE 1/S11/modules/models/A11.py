# -*- coding: utf-8 -*-
"""model11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12eL8Va_QKtbKTM0QBnXFESiSDEfO0sss
"""

import torch.nn as nn
import torch.nn.functional as F
import torch


class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()

        self.preplayer = nn.Sequential(nn.Conv2d(in_channels=3, out_channels=64, kernel_size=3, padding=1, bias=False),                                             
                                       nn.BatchNorm2d(64),
                                       nn.ReLU())      # Receptive Field 3
                                                     
 #Layer 1 :         

        self.x1 = nn.Sequential(nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=1, bias=False), 
                                # Receptive Field  5                                         
                                nn.MaxPool2d(2, 2),
                                nn.BatchNorm2d(128),
                                nn.ReLU())            # Receptive Field 6

#ResBlock 1 :
            
    
        self.R1 = nn.Sequential(nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, padding=1, bias=False),      
                                nn.BatchNorm2d(128),
                                nn.ReLU(),           # Receptive Field 10
                                nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, padding=1, bias=False), 
                                nn.BatchNorm2d(128),
                                nn.ReLU())           # Receptive Field 14

           
            
            
#Layer 2 :


        self.x2 = nn.Sequential(nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, padding=1, bias=False),
                                # Receptive Field 18
                                nn.MaxPool2d(2, 2),
                                nn.BatchNorm2d(256),
                                nn.ReLU())         # Receptive Field 20

           
                    
        
#Layer 3 :


        self.x3 = nn.Sequential(nn.Conv2d(in_channels=256, out_channels=512, kernel_size=3, padding=1, bias=False), 
                                # Receptive Field 28
                                nn.MaxPool2d(2, 2),
                                nn.BatchNorm2d(512),
                                nn.ReLU())       # Receptive Field 32
 
            
 #ResBlock 2 :       
            

        self.R2 = nn.Sequential(nn.Conv2d(in_channels=512, out_channels=512, kernel_size=3, padding=1, bias=False), 
                                nn.BatchNorm2d(512),
                                nn.ReLU(),       # Receptive Field 48
                                nn.Conv2d(in_channels=512, out_channels=512, kernel_size=3, padding=1, bias=False), 
                                nn.BatchNorm2d(512),
                                nn.ReLU())       # Receptive Field 64

          
        
        self.pool = nn.MaxPool2d(4)          # Receptive Field 88

        self.fc = nn.Linear(in_features = 512, out_features = 10,bias=False)

      


    def forward(self, x):

        preplayer = self.preplayer(x)  # Receptive Field 3
        x = self.x1(preplayer)         # Receptive Field 6
        R = self.R1(x)                 # Receptive Field 14
        x = x+R                        
        x = self.x2(x)                 # Receptive Field 20 , 14 , 6
        x = self.x3(x)                 # Receptive Field 32 , 20 , 14 , 6   
        R = self.R2(x)                 # Receptive Field 64 , 32 , 20 , 14 , 6 
        x = R+x                          
        x = self.pool(x)               # Receptive Field 88 , 64 , 32 , 20 , 14 , 6      
        x = x.view(-1, 512)               
        x = self.fc(x)                       

        return F.log_softmax(x,dim=-1)